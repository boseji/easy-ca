#!/bin/bash
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

# Derek Moore <derek.moore@gmail.com>
# Christian GÃ¶ttsche <cgzones@googlemail.com>

set -eu
set -o pipefail

umask 0077

BIN_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
source "${BIN_DIR}/functions"
source "${BIN_DIR}/defaults.conf"

usage() {
    echo "Usage: $0 -s SERVER_NAME [-a ALT_NAME]..."
    echo "Issues a server certificate for SERVER_NAME"
    echo
    echo "Options:"
    echo "    -s SERVER_NAME  Server hostname (commonName) for the new cert"
    echo "    -a ALT_NAME     One (or more) subjectAltNames for the new cert (optional)"
    echo
    exit 2
}

if [ ! -f ca/ca.crt ]; then
    echo -e "$ERR Must be run inside a CA directory!"
    exit 2
fi

SERVER_NAME=
ALT_NAME=

while getopts s:a: FLAG; do
    case $FLAG in
        s) SERVER_NAME="${OPTARG}"
           if [ -z "${ALT_NAME}" ]; then
               ALT_NAME="DNS:${OPTARG}"
           else
               ALT_NAME="${ALT_NAME}, DNS:${OPTARG}"
           fi
           ;;
        a) if [ -z "${ALT_NAME}" ]; then
               ALT_NAME="DNS:${OPTARG}"
           else
               ALT_NAME="${ALT_NAME}, DNS:${OPTARG}"
           fi
           ;;
        *) echo -e -n "$ERR " && usage
           ;;
    esac
done

if [ $OPTIND -le $# ]; then
    echo -e -n "$ERR " && usage
elif [ "${SERVER_NAME}" = "" ]; then
    echo -e -n "$SUCC " && usage
fi

# Sanitize the commonName to make it suitable for use in filenames
SAFE_NAME=$(echo "${SERVER_NAME}" | sed 's/\*/star/g' | sed 's/[^A-Za-z0-9-]/-/g')

echo -e "$NOTE Creating new SSL server certificate for:"
echo -e "$NOTE commonName       ${SERVER_NAME}"
echo -e "$NOTE subjectAltName   ${ALT_NAME}"

pushd "${BIN_DIR}/.." > /dev/null

if [ -f conf/"${SAFE_NAME}".server.conf ]; then
    echo -e "$ERR Configuration already exists for '${SERVER_NAME}', exiting."
    exit 1
fi

trap 'rm -f "conf/${SAFE_NAME}.server.conf" "private/${SAFE_NAME}.server.key" "certs/${SAFE_NAME}.server.crt"' 0

echo
echo -e -n "$INPUT Enter passphase for signing CA key: "
read -r -s PASS
echo
export CA_PASS="${PASS}"
openssl rsa -check \
            -in ca/private/ca.key \
            -passin env:CA_PASS \
            -noout

# Generate the server openssl config
export CA_HOSTNAME="${SERVER_NAME}"
export SAN="${ALT_NAME}"
template "${BIN_DIR}/templates/server.tpl" "conf/${SAFE_NAME}.server.conf"

echo -e "$NOTE Creating the server key and csr"

openssl req -new -nodes \
            -config "conf/${SAFE_NAME}.server.conf" \
            -keyout "private/${SAFE_NAME}.server.key" \
            -out "csr/${SAFE_NAME}.server.csr"
chmod 0400 "private/${SAFE_NAME}.server.key"

echo -e "$NOTE Creating the server certificate"

openssl ca -batch -notext \
           -config conf/ca.conf \
           -in "csr/${SAFE_NAME}.server.csr" \
           -out "certs/${SAFE_NAME}.server.crt" \
           -extensions server_ext \
           -passin env:CA_PASS

echo -e "$NOTE Verifying trusted chain"

openssl verify -CAfile ca/chain.pem "certs/${SAFE_NAME}.server.crt"

popd > /dev/null

unset CA_PASS

trap 0

echo -e "$SUCC Server certificate for '${SERVER_NAME}' created."
