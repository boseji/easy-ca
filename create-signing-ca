#!/bin/bash
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

# Derek Moore <derek.moore@gmail.com>
# Christian GÃ¶ttsche <cgzones@googlemail.com>

set -eu
set -o pipefail

umask 0077

BIN_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
source "${BIN_DIR}/functions"
source "${BIN_DIR}/defaults.conf"

usage() {
    echo "Usage: $0 -d CA_DIR"
    echo "Initializes a new signing sub-CA in CA_DIR"
    echo "Must be run inside a root CA dir"
    echo
    echo "Options:"
    echo "    -d CA_DIR  Target directory to be created and initialized"
    echo
    exit 2
}

if ! openssl verify -CAfile ca/ca.crt ca/ca.crt >/dev/null 2>&1; then
    echo -e -n "$ERR " && usage
fi

CA_DIR=

while getopts d: FLAG; do
    case $FLAG in
        d) CA_DIR=${OPTARG} ;;
        *) echo -e -n "$ERR " && usage ;;
    esac
done

if [ $OPTIND -le $# ]; then
    echo -e -n "$ERR " && usage
elif [[ "${CA_DIR}" = "" ]]; then
    echo -e -n "$SUCC " && usage
fi

PARENT="${BIN_DIR}/.."
CA_NAME="$( basename "${CA_DIR}" )"
CA_PATH="$( fullpath "${CA_DIR}")"

echo
echo -e "$NOTE Creating new signing sub-CA in '${CA_DIR}'"
echo

init_ca_home "${CA_DIR}"
trap 'rm -Rf "${CA_DIR}"' 0
generate_conf "${CA_DIR}/bin/defaults.conf"
source "${CA_DIR}/bin/defaults.conf"

CA_CERT_CN="${CA_CERT_O} Certificate ${CA_NAME}"
echo -e -n "$INPUT Common Name for CA certificate [${CA_CERT_CN}]: "
read -r CERT_CN
if [ -n "${CERT_CN}" ]; then
    CA_CERT_CN="${CERT_CN}"
fi

echo
echo -e -n "$INPUT Enter passphase for encrypting signing sub-CA key: "
read -r -s PASS1
echo
echo -e -n "$INPUT Verifying - Enter passphase for encrypting signing sub-CA key: "
read -r -s PASS2
echo

if [ "${PASS1}" != "${PASS2}" ]; then
    echo -e "$ERR Passphrases did not match, exiting."
    exit 1
fi
export CA_PASS"=${PASS1}"
export SAN=""

echo

echo -e -n "$INPUT Enter passphase for root CA key: "
read -r -s PARENT_PASS
echo
export CA_PARENT_PASS="${PARENT_PASS}"
openssl rsa -check \
            -in ca/private/ca.key \
	    -passin env:CA_PARENT_PASS

pushd "${CA_DIR}" > /dev/null

# Generate the signing CA openssl config
template "${BIN_DIR}/templates/signing.tpl" "conf/ca.conf"

echo -e "$NOTE Creating the signing sub-CA key"

# Create the signing CA key
openssl genrsa -out ca/private/ca.key -"${CA_KEY_ALG}" -passout env:CA_PASS "${CA_KEY_LENGTH_SIGNCA}"
chmod 0400 ca/private/ca.key

echo -e "$NOTE Creating the signing sub-CA csr"

openssl req -new -batch \
            -config conf/ca.conf \
            -key ca/private/ca.key \
            -out ca/ca.csr \
            -passin env:CA_PASS

echo -e "$NOTE Creating the signing sub-CA certificate"

pushd "${PARENT}" > /dev/null
openssl ca -batch -notext \
           -config conf/ca.conf \
           -in "${CA_DIR}/ca/ca.csr" \
           -out "${CA_DIR}/ca/ca.crt" \
           -extensions signing_ca_ext \
           -passin env:CA_PARENT_PASS
popd > /dev/null

echo -e "$NOTE Creating the signing sub-CA CRL"

openssl ca -gencrl -batch \
           -config conf/ca.conf \
           -out crl/ca.crl \
           -passin env:CA_PASS

echo -e "$NOTE Creating the chain bundle"

if [ -f "${PARENT}/ca/chain.pem" ]; then
    cat "${PARENT}/ca/chain.pem" > ca/chain.pem
else
    cat "${PARENT}/ca/ca.crt" > ca/chain.pem
fi
cat ca/ca.crt >> ca/chain.pem

echo -e "$NOTE Verifying trusted chain"

openssl verify -CAfile ca/chain.pem ca/ca.crt

echo -e "$NOTE Copying toolchain (symlinking)"

# Replicate the existing binary directory
for BIN in ${BINARIES_SIGN}; do
    ln -s "${BIN_DIR}/${BIN}" bin/
done
mkdir bin/templates/
for TPL in ${TEMPLATES_SIGN}; do
    ln -s "${BIN_DIR}/templates/${TPL}" bin/templates/
done

popd > /dev/null

unset CA_PASS
unset CA_PARENT_PASS

trap 0
echo -e "$SUCC Signing sub-CA initialized."
